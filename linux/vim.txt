Vim

vim <FILE_NAME>

quit 	:q!
write	:w!  or :wq

show lines	:set number
go to line	:<LINE_NUMBER>

go to the end of the file	:$
go to the end of the line	$

delete line		dd

undo	u

select	v
copy	y
paste	p


o	new line after
i	insert

search	:/<SEARCH_KEYWORD>
	"n" to go to the next instance
	"N" to go to the previous one

search backwards	:?

# Jump forward and land on the < character

f<

# Jump forward and land right before the < character

t<

:split <FILE_NAME>
:vsplit <FILE_NAME>

control	ww

Config
vi ~/vim/.vimrc

syntax on # highlight syntax
set number # show line numbers
set noswapfile # disable the swapfile
set hlsearch # highlight all results
set ignorecase # ignore case in search
set incsearch # show search results as you type

-------------------------------------------------------------------------------------------------------------------------------
A search reference

    /{string}: search for string
    t: jump up to a character
    f: jump onto a character
    *: search for other instances of the word under your cursor
    n: go to the next instance when you've searched for a string
    N: go to the previous instance when you've searched for a string
    ;: go to the next instance when you've jumped to a character
    ,: go to the previous instance when you've jumped to a character

	You can use the ";" to move forward to the next instance of what you searched for—whether you used "t" or "f" to search for it. Also, a comma "," does the same, but backward

Moving
    j: move down one line
    k: move up one line
    h: move left one character
    l: move right one character


Moving within the line

You can easily move within the line you're on.

    0: move to the beginning of the line
    $: move to the end of the line
    ^: move to the first non-blank character in the line
    t": jump to right before the next quotes
    f": jump and land on the next quotes

, and ; will repeat the previous t and f jumps.
Moving by word

You can also move by word:

    w: move forward one word
    b: move back one word
    e: move to the end of your word

When you use uppercase you ignore some delimiters within a string that may break it into two words.

    W: move forward one big word
    B: move back one big word

This uppercasing of a given command having different and more powerful effects is something we'll see frequently.
Moving by sentence or paragraph

    ): move forward one sentence
    }: move forward one paragraph

Moving within the screen

    H: move to the top of the screen
    M: move to the middle of the screen
    L: move to the bottom of the screen
    gg: go to the top of the file
    G: go to the bottom of the file
    ^U: move up half a screen
    ^D: move down half a screen
    ^F: page down
    ^B: page up

Jumping back and forth

While you're in normal mode it's possible to jump back and forth between two places, which can be extremely handy.

    Ctrl-i: jump to your previous navigation location
    Ctrl-o: jump back to where you were

Other motions

    :$line_numberH: move to a given line number
    ^E: scroll up one line
    ^Y: scroll down one line
    ^U: move up half a page
    ^D: move down half a page
    ^F: move down a page
    ^B: move up a page

So let's package that all up into one place:
Motion command reference

    j: move down one line
    k: move up one line
    h: move left one character
    l: move right one character
    0: move to the beginning of the line
    $: move to the end of the line
    w: move forward one word
    b: move back one word
    e: move to the end of your word
    ): move forward one sentence
    }: move forward one paragraph
    :line_number: move to a given line number
    H: move to the top of the screen
    M: move to the middle of the screen
    L: move to the bottom of the screen
    ^E: scroll up one line
    ^Y: scroll down one line
    gg: go to the top of the file
    G: go to the bottom of the file
    ^U: move up half a page
    ^D: move down half a page
    ^F: move down a page
    ^B: move up a page
    Ctrl-i: jump to your previous navigation location
    Ctrl-o: jump back to where you were


Basic change/insert options

Let's start with the options here.

    i: insert before the cursor
    a: append after the cursor
    I: insert at the beginning of the line
    A: append at the end of the line
    o: open a new line below the current one
    O: open a new line above the current one
    r: replace the one character under your cursor
    R: replace the character under your cursor, but just keep typing afterwards
    cm: change whatever you define as a movement, e.g. a word, or a sentence, or a paragraph.
    C: change the current line from where you're at
    ct?: change change up to the question mark
    s: substitute from where you are to the next command (noun)
    S: substitute the entire current line_number


# Change inside sentence

cis

# Go to the beginning of the line and enter insert mode

I

# Start typing right after the cursor

a

As you can see, there are lots of ways to start entering text. There are also some shortcuts (shown above as well) for doing multiple things at once, such as deletion and entering Insert Mode.

# Delete the line from where you're at, and enter insert mode

C

# Delete the entire line you're on, and enter insert mode

S
Changing Case

You can change the case of text using the tilde (~) command. It works as you'd imagine—either on the letter under the cursor, or on a selection.
Formatting Text

It's sometimes helpful to format text quickly, such as paragraphs, and this can easily be done with the following command:

# Format the current paragraph

gq ap

gq works based on your textwidth setting, which means it'll true up whatever you invoke it on to be nice and neat within those boundaries.

The "ap" piece is the standard "around paragraph" text object.
Deleting text

Now that we know how to change text, let's see how to do straight deletes. As you're probably getting now, it's very similar—just a different action to start things off.
Basic deletion options

    x: exterminate (delete) the character under the cursor
    X: exterminate (delete) the character before the cursor
    dm: delete whatever you define as a movement, e.g. a word, or a sentence, or a paragraph.
    dd: delete the current line
    dt.: delete delete from where you are to the period
    D: delete to the end of the line
    J: join the current line with the next one (delete what's between)

Simple enough.
Undo and Redo

You can't have a text editor without undo and redo. As you've probably noticed, Vim does its best to make the keys for the actions feel intuitive, and undo and redo are not exceptions.

    u: undo your last action.
    Ctrl-r: redo the last action

Remember that you should have already remapped your CAPSLOCK to Ctrl so that you can do this quickly with your left pinky.

Both commands can be used repeatedly, until you either go all the way back to the last save, or all the way forward to your current state.
Repeating Actions

One of the most powerful commands in all of Vim is the period ".", which seems strange, right? Well, the period "." allows you to do something brilliant—it lets you repeat whatever it is that you just did.
Using the "." to repeat your last action

Many tasks you do will make a lot of sense to repeat. Going into insert mode and adding some text, for example. You can do it once and then just move around and add it again with just the "." Here are a couple of other examples.

# delete a word

dw

# delete five more words

5.

Whoa. And wait until you see it combined with Visual Mode.
Copy and Paste

Another text editor essential is being able to quickly copy and paste text, and Vim is masterful at it.

Another really powerful repeat command is &, which repeates your last ex command.
Copying text

Vim does copying a bit different than one might expect. The command isn't c, as one might expect. If you'll remember, c is already taken for "change". Vim instead uses y for "yank" as it's copy command and shortcut.

    y: yank (copy) whatever's selected
    yy: yank the current line

Remember, just like with any other copy you're not messing with the source text—you're just making another...copy...at the destination.
Cutting text

Cutting text is simple: it's the same as deleting. So whatever syntax you're using for that, you're actually just pulling that deleted text into a buffer and preparing it to be pasted.
Pasting text

Pasting is fairly intuitive—it uses the p command as its base. So, if you delete a line using dd, you can paste it back using p.

One thing to remember about pasting is that it generally starts right after your cursor, and either pastes characters/words or lines or columns—based on what you copied (yanked). Also remember that you can undo any paste with the universal undo command "u".
A copy and paste reference

    y: yank (copy) from where you are to the next command (noun)
    yy: a shortcut for copying the current line
    p: paste the copied (or deleted) text after the current cursor position
    P: paste the copied (or deleted) text before the current cursor position

# Switching lines of text

ddp

This is a quick trick you can use to swap the position of two lines of text. The first part deletes the line you're on, and the second part puts it back above where it used to be.



Substitution

Another powerful feature of Vim is its ability to do powerful substitutions. They're done by specifying what you're looking for first, then what you're changing it to, then the scope of the change.

The basic setup is the :%s

# Change "foo" to "bar" on every line

:%s /foo/bar/g

# Change "foo" to "bar" on just the current line

:s /foo/bar/g

Notice the lack of the % before the "s".


-------------------------------------------------------------------------------------------------------------------------------

Verbs

Verbs are the actions we take, and they can be performed on nouns. Here are some examples:

    d: delete
    c: change
    y: yank (copy)
    v: visually select (V for line vs. character)

Modifiers

Modifiers are used before nouns to describe the way in which you're going to do something. Some examples:

    i: inside
    a: around
    NUM: number (e.g.: 1, 2, 10)
    t: searches for something and stops before it
    f: searches for that thing and lands on it
    /: find a string (literal or regex)

Nouns

In English, nouns are objects you do something to. They are objects. With Vim it's the same. Here are some Vim nouns:

    w: word
    s: sentence
    ): sentence (another way of doing it)
    p: paragraph
    }: paragraph (another way of doing it)
    t: tag (think HTML/XML)
    b: block (think programming)

Nouns as motion

You can also use nouns as motions, meaning you can move around your content using them as the size of your jump. We'll see examples of this below in the moving section.

# Delete two words

d2w

# Change inside sentence (delete the current one and enter insert mode)

cis

# Yank inside paragraph (copy the paragraph you're in)

yip

# Change to open bracket (change the text from where you are to the next open bracket)

ct<


    vi file: open your file in vim
    :w: write your changes to the file
    :q!: get out of vim (quit), but without saving your changes (!)
    :wq: write your changes and exit vim
    :saveas ~/some/path/: save your file to that locationvim

While :wq works I tend to use ZZ, which doesn't require the ":" and just seems faster to me. You can also use :x

    ZZ: a faster way to do :wq
