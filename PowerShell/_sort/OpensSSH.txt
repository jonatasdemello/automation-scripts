Install Win32 OpenSSH

Download the latest build of OpenSSH. To get links to latest downloads this wiki page.

Extract contents of the latest build to C:\Program Files\OpenSSH (Make sure binary location has the Write permissions to just to SYSTEM, Administrator groups. Authenticated users should and only have Read and Execute.)

In an elevated Powershell console, run the following

powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1
Open the firewall for sshd.exe to allow inbound SSH connections

New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
Note: New-NetFirewallRule is for Windows 2012 and above servers only. If you're on a client desktop machine (like Windows 10) or Windows 2008 R2 and below, try:

netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22
Start sshd (this will automatically generate host keys under %programdata%\ssh if they don't already exist)

net start sshd
Optional

To configure a default shell, see here
To setup sshd service to auto-start
Set-Service sshd -StartupType Automatic
To migrate sshd configuration from older versions (0.0.X.X), see here
Uninstall Win32 OpenSSH
Start Windows Powershell as Administrator
Navigate to the OpenSSH directory
cd 'C:\Program Files\OpenSSH'
Run the uninstall script
powershell.exe -ExecutionPolicy Bypass -File uninstall-sshd.ps1


Might try gpedit.msc then;

Computer Configuration\Administrative Templates\System
Specify settings for optional component installation and component repair Enabled
Also check the box for
Download repair content and optional features directly from Windows Update instead of Windows Server Update Services (WSUS)

Run gpedit.msc (Group Policy) >> Computer Configuration >> Admin. Templates >> Windows Components >> Windows Update >> Specify intranet Microsoft update service location >> Disabled

c:\windows\system32\Openssh


ssh user1@contoso.com

# You can also use domain accounts to login

	# UPN syntax works...
	ssh user1@domain1@contoso.com
	# ...as does NetBIOS syntax
	ssh user1\domain1@contoso.com

	cd ~\.ssh\
	ssh-keygen

	# Make sure you're running as an Administrator
	Start-Service ssh-agent

	# This should return a status of Running
	Get-Service ssh-agent

	# Now load your key files into ssh-agent
	ssh-add ~\.ssh\id_ed25519

	# Now that it's loaded into ssh-agent,
	# we don't have to keep the key file anymore
	Remove-Item ~\.ssh\id_ed25519

	# Make sure that the .ssh directory exists in your server's home folder
	ssh user1@domain1@contoso.com mkdir C:\users\user1\.ssh\

	# Copy your public key file to authorized_keys on your server
	scp C:\Users\user1\.ssh\id_ed25519.pub user1@domain1@contoso.com:C:\Users\user1\.ssh\authorized_keys

	# Appropriately ACL the authorized_keys file on your server
	ssh --% user1@domain1@contoso.com powershell -c $ConfirmPreference = 'None'; Repair-AuthorizedKeyPermission C:\Users\user1\.ssh\authorized_keys


	# Configuring the OpenSSH Server (sshd)
	Start-Service ssh-agent

	cd C:\Windows\System32\OpenSSH
	.\ssh-keygen -A

	# C:\Windows\System32\OpenSSH\ssh-keygen.exe: generating new host keys: ED25519
	.\ssh-add ssh_host_ed25519_key

	# Identity added: .\ssh_host_ed25519_key (User1@CONTOSO@LOCAL-HOSTNAME)

	Install-Module -Force OpenSSHUtils

	Repair-SshdHostKeyPermission -FilePath C:\Windows\System32\OpenSSH\ssh_host_ed25519_key

	# Use A or Y as your response to the prompts to set file owners

	Start-Service sshd

	# This should return a Status of Running

	Get-Service sshd

	# You may also need to add a firewall rule like this one that allows traffic on port 22 (though your requirements may vary based on your environment, e.g. Domain might be Private):

	New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Service sshd -Enabled True -Direction Inbound -Protocol TCP -Action Allow -Profile Domain





Installing with DISM.exe
To install OpenSSH with DISM.exe, first open CMD as an Administrator.

To make sure that OpenSSH features are available for install:

	DISM /Online /Get-Capabilities | findstr OpenSSH

This should return the following output:

Capability Identity : OpenSSH.Client~~~~0.0.1.0
Capability Identity : OpenSSH.Server~~~~0.0.1.0

Then, install the server and/or client features:

	dism /Online /Add-Capability /CapabilityName:OpenSSH.Client~~~~0.0.1.0
	dism /Online /Add-Capability /CapabilityName:OpenSSH.Server~~~~0.0.1.0

C:\WINDOWS\Logs\DISM\dism.log

DISM.exe (Deployment Image Servicing and Management)

	Dism.exe /online /Cleanup-Image /StartComponentCleanup

In addition, you can also run the following commands:

	DISM /Online /Cleanup-Image /StartComponentCleanup
	DISM /Online /Cleanup-Image /AnalyzeComponentStore

After running these commands try to perform DISM scan again. A couple of users reported that running the following commands fixed the problem:

	Dism.exe /online /Cleanup-Image /StartComponentCleanup
	Dism.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase


Get-WindowsCapability -Online | ? name -like *OpenSSH.Server*
Get-WindowsCapability -Online | ? name -like *OpenSSH.*

Get-WindowsCapability -Online | ? name -like *OpenSSH.Server* | Add-WindowsCapability -Online


	Add-WindowsCapability failed. Error code = 0x800f0950
	Error with "Add-WindowsCapability". Error code: 0x8024002e

Set-Service sshd -StartupType Automatic
Set-Service ssh-agent -StartupType Automatic

Start-Service sshd
Start-Service ssh-agent

Get-Service -Name *ssh* | select DisplayName, Status, StartType

Get-NetFirewallRule -Name *SSH*


ssh <Name-of-Server>

1) winver (in the pop up about windows > view your windows version and build > type this information into the thread)
2) sfc /scannow
3) dism /online /cleanup-image /restorehealth
4) chkdsk /scan


%SYSTEMROOT%\System32\OpenSSH\

C:\Windows\System32\OpenSSH
C:\ProgramData\ssh



https://www.powershellgallery.com/packages/OpenSSHUtils/1.0.0.1


# https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client
# https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse


Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'

# This should return the following output:

Name  : OpenSSH.Client~~~~0.0.1.0
State : NotPresent
Name  : OpenSSH.Server~~~~0.0.1.0
State : NotPresent

Then, install the server and/or client features:
PowerShell

# Install the OpenSSH Client
Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0

# Install the OpenSSH Server
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0

# Both of these should return the following output:

Path          :
Online        : True
RestartNeeded : False

Uninstalling OpenSSH

# Uninstall the OpenSSH Client
Remove-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0

# Uninstall the OpenSSH Server
Remove-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0


Start-Service sshd
# OPTIONAL but recommended:
Set-Service -Name sshd -StartupType 'Automatic'

# Confirm the Firewall rule is configured. It should be created automatically by setup.
Get-NetFirewallRule -Name *ssh*

# There should be a firewall rule named "OpenSSH-Server-In-TCP", which should be enabled
# If the firewall does not exist, create one
New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22



Initial use of SSH

Ssh username@servername

Once you connect you will see a command shell prompt similar to the following:

domain\username@SERVERNAME C:\Users\username>






RemotingTools
	https://www.powershellgallery.com/packages/Microsoft.PowerShell.RemotingTools/0.1.0

	Install-Module -Name Microsoft.PowerShell.RemotingTools

OpenSSH Key Management
	https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement


Add Repo:
	Register-PSRepository -Name "PSGallery" â€“SourceLocation "https://www.powershellgallery.com/api/v2/" -InstallationPolicy Trusted


	Get-PSRepository

	Register-PSRepository -Default


Than check the repository:
PS C:\WINDOWS\system32> Get-PSRepository

Name                      InstallationPolicy   SourceLocation
----                      ------------------   --------------
PSGallery                 Untrusted            https://www.powershellgallery.com/api/v2


Set-PSRepository -Name PSGallery -InstallationPolicy Trusted


	Install-PackageProvider -Name NuGet
	Install-Module -Name MSOnline

	Install-Module PackageManagement -Force -Repository PSGallery -AllowPrerelease


	Get-PackageSource
	Register-PackageSource -Name nuget.v2 -Location https://www.nuget.org/api/v2 -ProviderName NuGet


Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'


# Install the OpenSSH Client
Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0

# Install the OpenSSH Server
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0



# Install the OpenSSHUtils module to the server. This will be valuable when deploying user keys.
Install-Module -Force OpenSSHUtils -Scope AllUsers

# Start the ssh-agent service to preserve the server keys
Start-Service ssh-agent

# Now start the sshd service
Start-Service sshd

# User key generation
cd ~\.ssh\
ssh-keygen


# Make sure you're running as an Administrator

Start-Service ssh-agent

# https://devblogs.microsoft.com/powershell/using-the-openssh-beta-in-windows-10-fall-creators-update-and-windows-server-1709/

# This should return a status of Running

Get-Service ssh-agent

# Now load your key files into ssh-agent
ssh-add ~\.ssh\id_ed25519


# Deploying the public key
To use the user key that was created above, the public key needs to be placed on the server into a text file called authorized_keys under users\username\.ssh\. The OpenSSH tools include scp, which is a secure file-transfer utility, to help with this.

To move the contents of your public key (~.ssh\id_ed25519.pub) into a text file called authorized_keys in ~.ssh\ on your server/host.

This example uses the Repair-AuthorizedKeyPermissions function in the OpenSSHUtils module which was previously installed on the host in the instructions above.

PowerShell

Copy
# Make sure that the .ssh directory exists in your server's home folder
ssh user1@domain1@contoso.com mkdir C:\users\user1\.ssh\

# Use scp to copy the public key file generated previously to authorized_keys on your server
scp C:\Users\user1\.ssh\id_ed25519.pub user1@domain1@contoso.com:C:\Users\user1\.ssh\authorized_keys

# Appropriately ACL the authorized_keys file on your server
ssh --% user1@domain1@contoso.com powershell -c $ConfirmPreference = 'None'; Repair-AuthorizedKeyPermission C:\Users\user1\.ssh\authorized_keys
These steps complete the configuration required to use key-based authentication with SSH on Windows. After this, the user can connect to the sshd host from any client that has the private key.



https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH




https://code.visualstudio.com/docs/remote/ssh

https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication

https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client


