Create a new branch and switch to it:

git checkout -b ＜new-branch＞

git checkout -b ＜new-branch＞ ＜existing-branch＞



Copying a file from one branch to another

If you only need to copy a specific file or set of files from one branch to another, use the following steps:

Step 1: Checkout the target branch

Switch to the branch where you want the file to go:

	git checkout <target_branch>

Step 2: Copy the file from the source branch

Copy the file from another branch without switching branches:

	git checkout <source_branch> -- <path_to_file>

This command brings the specific file from <source_branch> into your current working directory on <target_branch>.

Step 3: Commit the changes

After copying the file, commit it to the target branch:

	git add <path_to_file>
	git commit -m "Copied <path_to_file> from <source_branch> to <target_branch>"

Copying changes from one branch to another

To copy specific commits or changes from one branch to another, you can use the git cherry-pick command. This is useful for applying bug fixes or feature additions selectively.

Step 1: Find the commit hash

First, identify the commit(s) you want to copy. You can find the commit hash by looking at the log of the source branch:

	git log <source_branch>

Step 2: Cherry-pick the commit

Switch to the target branch where you want to apply the commit:

	git checkout <target_branch>

Then cherry-pick the commit:

	git cherry-pick <commit_hash>

