# Git maintenance

Maintenance:
------------------------
The first two items should be run on your server repositories as well as your user repositories.

Validate your repo is sane

	git fsck

You need not check dangling objects unless you are missing something

Compact your repo

	git gc
	git gc --aggressive

This will removed outdated dangling objects (after the two+ week grace period).
It will also compress any loose objects git has added since your last gc.
git will run a minimal gc automatically after certain commands,
but doing a manual gc often (and "--aggressive" every few hundred changesets)
will save space and speed git operations.

Prune your remote tracking branches

	git remote update --prune

This will get rid of any branches that were deleted upstream since you cloned/pruned.
It normally isn't a major problem one way or another, but it might lead to confusion.

Check your stash for forgotten work

	git stash list

If you don't do it very often, the context for the stashed work will be forgotten when you finally do stumble on it, creating confusion.


	git fsck
	git gc
	git gc --aggressive
	git remote update --prune
	git stash list

	git fetch -p (--prune)
	git fetch -P (--prune-tags)


# Remove local branches no longer on remote

	git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d

	git branch -d $(git branch --merged)
		works by removing branches that have been merged.

	git remote prune origin
		will prune tracking branches not on the remote.


	git branch -vv
	#then
	git fetch -p && for branch in `git branch -vv | grep ': gone]' | gawk '{print $1}'`; do git branch -D $branch; done

	git gc --prune=now
	git remote prune origin
	git remote prune

	git branch -vv | grep ': gone]' | grep -v "\*" | awk '{ print $1; }' | xargs -r git branch -D

	- will list your local branches and show information about the remote branch, saying “gone” if it is not present anymore.
	- will fetch the branches that match the “: gone]” phrase.
	- will fetch only lines that do not contain an asterisk. This will ignore the branch you are currently on and also prevent that the “git branch -d” is executed with a “*” at the end which would result in deleting all your local branches.
	- will fetch the output until the first white space, which will result in the local branch name.
	- will use the output (branch name) and append it to the “git branch -d” command to finally delete the branch.
	If you also want to delete branches that are not fully merged, you can use a capital “D” instead of “d” to force delete.
	Because of the “-r” parameter, the command is not executed if there is no input / branch name.


	git remote prune origin

		prunes tracking branches not on the remote.

	git branch --merged

		lists branches that have been merged into the current branch.

	xargs git branch -d

		deletes branches listed on standard input.

		Be careful deleting branches listed by git branch --merged. The list could include master or other branches you'd prefer not to delete.
		To give yourself the opportunity to edit the list before deleting branches, you could do the following in one line:

	git branch --merged >/tmp/merged-branches && vi /tmp/merged-branches && xargs git branch -d </tmp/merged-branches



# Delete a branch (local or remote)

	To delete a local branch

		git branch -d the_local_branch

	To remove a remote branch (if you know what you are doing!)

		git push origin :the_remote_branch

	To delete a local branch

	git branch -d the_local_branch

	git branch -D the_local_branch

	To remove a remote branch (if you know what you are doing!)

	git push origin :the_remote_branch

	# If you get the error error: unable to push to unqualified destination:
	# the_remote_branch The destination refspec neither matches an existing ref on the remote nor begins with refs/,
	# and we are unable to guess a prefix based on the source ref. error: failed to push some refs to 'git@repository_name'

	# perhaps someone else has already deleted the branch. Try to synchronize your branch list with

	git fetch -p

	# The git manual says -p, --prune After fetching, remove any remote-tracking branches
	# which no longer exist on the remote.

	git fetch -p --prune

	list remote branches:

	git branch -r

	list all (local and remote)

	git branch -a


	If you want to see which files will be deleted you can use the -n option before you run the actual command:

	git clean -n

	Then when you are comfortable (because it will delete the files for real!) use the -f option:

	git clean -f

	Here are some more options for you to delete directories, files, ignored and non-ignored files

	To remove directories, run
		git clean -f -d
		git clean -fd

	To remove ignored files, run
		git clean -f -X
		git clean -fX

	To remove ignored and non-ignored files, run
		git clean -f -x
		git clean -fx


# Remove local directories not in remove:

git clean -fd


Git doesn't track directories, so it won't remove ones that become empty as a result of a merge or other change.
However, you can use git clean -fd to remove untracked directories
(the -fd flag means force removal of untracked files and directories).


git remote prune origin

Deletes all stale tracking branches which have already been removed at origin
but are still locally available in remotes/origin.

git gc --auto

'G arbage C ollection' - runs housekeeping tasks (compresses revisions, removes loose/inaccessible objects). The --auto flag first determines whether any work is required, and exits without doing anything if not.



# How to remove local untracked files from the current Git branch

If you want to see which files will be deleted you can use the -n option before you run the actual command:

git clean -n

Then when you are comfortable (because it will delete the files for real!) use the -f option:

git clean -f


To remove directories, run git clean -f -d or git clean -fd
To remove ignored files, run git clean -f -X or git clean -fX
To remove ignored and non-ignored files, run git clean -f -x or git clean -fx



List ignored files
$ git ls-files . --ignored --exclude-standard --others

List untracked files
$ git ls-files . --exclude-standard --others

