# SSH

https://www.hostinger.com/tutorials/ssh-tutorial-how-does-ssh-work
https://www.howtogeek.com/336775/how-to-enable-and-use-windows-10s-built-in-ssh-commands/
https://www.hostinger.com/tutorials/ssh-tutorial-how-does-ssh-work

https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ssh-from-windows
https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-powershell

The public-private key pair is like the lock on your front door.
The lock is exposed to the public, anyone with the right key can open the door.
The key is private, and only given to people you trust because it can be used to unlock the door.

	- The public key is placed on your Linux VM when you create the VM.
	- The private key remains on your local system. Protect this private key. Do not share it.

When you connect to your Linux VM, the VM tests the SSH client to make sure it has the correct private key.
If the client has the private key, it's granted access to the VM.


Azure currently supports SSH protocol 2 (SSH-2) RSA public-private key pairs with a minimum length of 2048 bits.
Other key formats such as ED25519 and ECDSA are not supported.


C:\Users\username/.ssh/id_rsa

# Generate Key
ssh-keygen -m PEM -t rsa -b 4096

# Create VM:
az vm create \
   --resource-group myResourceGroup \
   --name myVM \
   --image UbuntuLTS\
   --admin-username azureuser \
   --ssh-key-value ~/.ssh/id_rsa.pub

# Connect:
ssh -i ~/.ssh/id_rsa.pub azureuser@10.111.12.123



# start the ssh-agent in the background
$ eval $(ssh-agent -s)
> Agent pid 59566

$ ls -al ~/.ssh
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

# Add your SSH private key to the ssh-agent.
$ ssh-add ~/.ssh/id_rsa





Add your SSH private key to the ssh-agent.
If you created your key with a different name,
or if you are adding an existing key that has a different name,
replace id_rsa in the command with the name of your private key file.

$ ssh-add ~/.ssh/id_rsa


# https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

Check if SSH key exists
	Open Git Bash.
	Enter ls -al ~/.ssh to see if existing SSH keys are present:
	# Lists the files in your .ssh directory, if they exist
	$ ls -al ~/.ssh

Check the directory listing to see if you already have a public SSH key.
By default, the filenames of the public keys are one of the following:
	id_rsa.pub
	id_ecdsa.pub
	id_ed25519.pub

Generating a new SSH key
    Open Git Bash.
    Paste the text below, substituting in your GitHub email address.
    $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
    This creates a new ssh key, using the provided email as a label.
    > Generating public/private rsa key pair.
    When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.
    > Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]
    At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".
    > Enter passphrase (empty for no passphrase): [Type a passphrase]
    > Enter same passphrase again: [Type passphrase again]

Adding your SSH key to the ssh-agent
	Before adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key.
	If you have GitHub Desktop installed, you can use it to clone repositories and not deal with SSH keys. It also comes with the Git Bash tool, which is the preferred way of running git commands on Windows.
    Ensure the ssh-agent is running:
        If you are using the Git Shell that's installed with GitHub Desktop, the ssh-agent should be running.
        If you are using another terminal prompt, such as Git for Windows, you can use the "Auto-launching the ssh-agent" instructions in "Working with SSH key passphrases", or start it manually:

        # start the ssh-agent in the background
        $ eval $(ssh-agent -s)
        > Agent pid 59566

    Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file.

    $ ssh-add ~/.ssh/id_rsa

    Add the SSH key to your GitHub account.


    Open Git Bash.

    Enter the following:

    $ ssh -T git@github.com
    # Attempts to ssh to GitHub

    You may see a warning like this:

    > The authenticity of host 'github.com (IP ADDRESS)' can't be established.
    > RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
    > Are you sure you want to continue connecting (yes/no)?

    or like this:

    > The authenticity of host 'github.com (IP ADDRESS)' can't be established.
    > RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
    > Are you sure you want to continue connecting (yes/no)?

    Verify that the fingerprint in the message you see matches one of the messages in step 2, then type yes:

    > Hi username! You've successfully authenticated, but GitHub does not
    > provide shell access.

    Verify that the resulting message contains your username. If you receive a "permission denied" message, see "Error: Permission denied (publickey)".





ssh-keygen -t rsa -b 4096




Connecting to a macOS or Linux SSH host:

export USER_AT_HOST="your-user-name-on-host@hostname"
export PUBKEYPATH="$HOME/.ssh/id_rsa.pub"

ssh-copy-id -i "$PUBKEYPATH" "$USER_AT_HOST"

Connecting to a Windows SSH host:

export USER_AT_HOST="your-user-name-on-host@hostname"
export PUBKEYPATH="$HOME/.ssh/id_rsa.pub"

ssh $USER_AT_HOST "powershell New-Item -Force -ItemType Directory -Path \"\$HOME\\.ssh\"; Add-Content -Force -Path \"\$HOME\\.ssh\\authorized_keys\" -Value '$(tr -d '\n\r' < "$PUBKEYPATH")'"




Connecting to a macOS or Linux SSH host:

$USER_AT_HOST="your-user-name-on-host@hostname"
$PUBKEYPATH="$HOME\.ssh\id_rsa.pub"

$pubKey=(Get-Content "$PUBKEYPATH" | Out-String); ssh "$USER_AT_HOST" "mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo '${pubKey}' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"

Connecting to a Windows SSH host:

$USER_AT_HOST="your-user-name-on-host@hostname"
$PUBKEYPATH="$HOME\.ssh\id_rsa.pub"

Get-Content "$PUBKEYPATH" | Out-String | ssh $USER_AT_HOST "powershell `"New-Item -Force -ItemType Directory -Path `"`$HOME\.ssh`"; Add-Content -Force -Path `"`$HOME\.ssh\authorized_keys`" `""

Validate that the authorized_key file in the .ssh folder for your remote user on the SSH host is owned by you and no other user has permission to access it.




# Bitnami

https://docs.bitnami.com/aws/apps/moodle/get-started/access-phpmyadmin/

What SSH username should I use for secure shell access to my application?

SSH username: bitnami

Run the following command to configure the SSH tunnel using the SSH key file. Remember to replace KEYFILE with the path to your private key and SERVER-IP with the public IP address or hostname of your server:

ssh -N -L 8888:127.0.0.1:80 -i KEYFILE bitnami@SERVER-IP

Access the phpMyAdmin console through the secure SSH tunnel you created, by browsing to http://127.0.0.1:8888/phpmyadmin.

Log in to phpMyAdmin by using the following credentials:

    Username: root
    Password: application password

sudo cat /home/bitnami/bitnami_credentials

cat bitnami_application_password

sudo cat installdir/apps/wordpress/wp-config.php | grep 'DB_HOST'


Database password

The database password is the same as the administrator password you use to log in to your application.


You should be able to access phpMyAdmin directly, by browsing to http://127.0.0.1/phpmyadmin.

Log in to phpMyAdmin by using the following credentials:

    Username: root
    Password: The same as the application password. Find out how to obtain application credentials.

sudo cat installdir/apps/wordpress/wp-config.php | grep 'DB_HOST'


NOTE: Bitnami applications can be found in /opt/bitnami.

LOCATION:
The public key that you place on your Linux VM in Azure is by default stored in ~/.ssh/id_rsa.pub,

ssh-keygen -m PEM -t rsa -b 4096

Your identification has been saved in /home/bitnami/.ssh/id_rsa
Your public key has been saved in /home/bitnami/.ssh/id_rsa.pub


If you have already created a VM, you can add a new SSH public key to your Linux VM using ssh-copy-id.

ssh-copy-id -i ~/.ssh/id_rsa.pub azureuser@myserver


This program does not modify the permissions of any  pre-existing  files  or  directories.
Therefore,  if  the  remote sshd has StrictModes set in its configuration, then the user's
home, ~/.ssh folder, and ~/.ssh/authorized_keys file may need to  have  group  writability
disabled manually, e.g. via

chmod go-w ~ ~/.ssh ~/.ssh/authorized_keys

on the remote machine.


